/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package socket.server;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.ServerSocket;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;

/**
 *
 * @author Jesus
 */
public class serverWindow extends javax.swing.JFrame {
    
    private Socket socket = null, socket_b = null;
    private ServerSocket server = null;
    private DataInputStream in = null;
    private boolean Con = true;
    private DataOutputStream out = null;
    List<ConnectionHandler> clients = new ArrayList<ConnectionHandler>();
    /**
     * Creates new form serverWindow
     */
    public serverWindow() {
        initComponents();
    }
    
    public void conn(){
        try{
            server = new ServerSocket(3000);
            logTextArea.append("Server's started.\n");
            logTextArea.append("Waiting for clients...\n");
            this.receivingFromBar.setVisible(false);
            this.receivingFromlbl.setVisible(false);
            while(Con){
                socket = server.accept();
                ConnectionHandler connectionHandler = new ConnectionHandler(socket, this);
                new Thread (connectionHandler).start();
                clients.add(connectionHandler);
            }
        } catch (IOException e){}
    }
    
    public void setVisibles(boolean value){
        this.receivingFromBar.setVisible(value);
        this.receivingFromlbl.setVisible(value);
    }
    
    public void BarBounds(int min, int max){
        this.receivingFromBar.setMinimum(min);
        this.receivingFromBar.setMaximum(max);
    }
    
    public void receivingLblSetText(String text){
        this.receivingFromlbl.setText(text);
    }
    
    public void BarSetValue(int value){
        this.receivingFromBar.setValue(value);
    }
    
    public void appenText(String append){
        this.logTextArea.append((append));
    }
    
    public void broadcast(String msg) {
        
        for(int i = clients.size(); --i >=0; ) {
            ConnectionHandler ch = clients.get(i);
            ch.sendTxt(msg + "\n");
        }
    }
    
    public void broadcastFile(File fileToSend, String whoSend){
        for(int i = clients.size(); --i >=0; ) {
            ConnectionHandler ch = clients.get(i);
            ch.sendFile(fileToSend, whoSend);
        }
    }
    
    public void broadcastRemaining(File fileToSend, String whoSend, ConnectionHandler cha){
        for(int i = clients.size(); --i >=0; ) {
            ConnectionHandler ch = clients.get(i);
            if(cha != ch) {
                ch.sendFile(fileToSend, whoSend);
            } else {
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        logLabel = new javax.swing.JLabel();
        offBtn = new javax.swing.JButton();
        dbBtn = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();
        textToClients = new javax.swing.JToggleButton();
        filePath = new javax.swing.JTextField();
        fileToClients = new javax.swing.JToggleButton();
        receivingFromBar = new javax.swing.JProgressBar();
        receivingFromlbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        logTextArea.setEditable(false);
        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        logLabel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        logLabel.setText("Server log");

        offBtn.setText("Shut down");
        offBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                offBtnActionPerformed(evt);
            }
        });

        dbBtn.setText("Database");
        dbBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbBtnActionPerformed(evt);
            }
        });

        text.setColumns(20);
        text.setRows(5);
        jScrollPane2.setViewportView(text);

        textToClients.setText("Sent Text");
        textToClients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textToClientsActionPerformed(evt);
            }
        });

        fileToClients.setText("SendFiles");
        fileToClients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileToClientsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(33, 33, 33)
                            .addComponent(logLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(122, 122, 122)
                            .addComponent(dbBtn)
                            .addGap(83, 83, 83)
                            .addComponent(offBtn))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 182, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(37, 37, 37))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap()))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(fileToClients, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(110, 110, 110))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(textToClients, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(101, 101, 101))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(receivingFromBar, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(receivingFromlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(logLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textToClients)
                        .addGap(24, 24, 24)
                        .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fileToClients)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(receivingFromlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(receivingFromBar, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(offBtn)
                    .addComponent(dbBtn))
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void offBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_offBtnActionPerformed
        logTextArea.append("Closing connection.\n");
        try{
            Con = false;
            socket.close();
        } catch (IOException e){}
        dataBaseConn dbC = new dataBaseConn();
    }//GEN-LAST:event_offBtnActionPerformed

    private void dbBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbBtnActionPerformed
        dbTable dbT = new dbTable();
    }//GEN-LAST:event_dbBtnActionPerformed

    private void textToClientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textToClientsActionPerformed
        Calendar calendar = Calendar.getInstance();
        Date date = calendar.getTime();
        dataBaseConn dbC = new dataBaseConn();
        dbC.Insert("Server", "", "", text.getText(), date.toString());
        logTextArea.append("Server: " + text.getText() + "\n");
        broadcast("Server: " + text.getText());
        this.text.setText("");
    }//GEN-LAST:event_textToClientsActionPerformed

    private void fileToClientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileToClientsActionPerformed
        File fileToSend = new File(filePath.getText());
        if (!fileToSend.exists())
            JOptionPane.showMessageDialog(fileToClients, "File not found.", "ERROR", ERROR_MESSAGE);
        else{
            logTextArea.append("Server send the file " + fileToSend.getName() + " of size " 
                    + (int) fileToSend.length() + " bytes.\n");
            broadcastFile(fileToSend, "Server");
        }
        this.filePath.setText("");
    }//GEN-LAST:event_fileToClientsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton dbBtn;
    private javax.swing.JTextField filePath;
    private javax.swing.JToggleButton fileToClients;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel logLabel;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JButton offBtn;
    public javax.swing.JProgressBar receivingFromBar;
    public javax.swing.JLabel receivingFromlbl;
    private javax.swing.JTextArea text;
    private javax.swing.JToggleButton textToClients;
    // End of variables declaration//GEN-END:variables
}
